# Project Intelligence: Tana Paste

## Project Overview
Tana Paste is a Raycast extension and Python script that converts text and Markdown to Tana's node-based format.

## Key Implementation Patterns

### Conversion Logic
- Core conversion happens in `src/utils/tana-converter.ts`
- Python alternative in `tana_converter.py`
- Both implementations share the same fundamental algorithm but are optimized for their respective environments

### Tana Format Requirements
- Headings must be prefixed with `- !!` 
- Fields follow the `key::value` format
- Proper indentation is critical for hierarchy
- Special formatting for dates: `[[date:YYYY-MM-DD]]`

### Special Format Support
- YouTube transcript timestamps are converted to separate nodes
- Limitless Pendant transcriptions follow "{Speaker}: {Content}" format
- Transcription content is properly indented under section headers
- YouTube video metadata is extracted and formatted with fields

### Command Structure
- All commands follow a consistent pattern:
  1. Get input (clipboard, selection, direct input, or browser content)
  2. Convert to Tana format
  3. Copy result to clipboard
  4. Notify user of success/failure

### Browser Integration
- YouTube to Tana command uses browser extension API
- Extracts metadata directly from active YouTube tab
- Processes HTML content to extract clean, usable text
- Handles HTML entities and special characters
- Detects paragraph breaks in transcripts based on time gaps

### Testing Approach
- Jest tests focus on isolated transformation functions
- Test cases cover various Markdown structures
- Edge cases are specifically targeted
- Special format detection is comprehensively tested
- HTML entity decoding is thoroughly tested

## Project Preferences

### Code Style
- Functional programming approach
- Strong typing with TypeScript
- Clear separation of concerns
- Minimal dependencies

### Documentation
- Comments for complex logic
- Comprehensive README
- Detailed CHANGELOG following semantic versioning

### Development Workflow
- Test-driven development encouraged
- Manual testing for complex transformations
- Version bump and CHANGELOG update with each release
- GitHub issue tracking and feature branches

## Usage Patterns
- Raycast extension for quick daily conversions
- Python script for large documents or batch processing
- Most common use: converting notes from other apps to Tana
- Growing use case: converting meeting transcriptions to structured notes
- New use case: extracting YouTube video information into Tana

## Known Challenges
- Complex nested structures require careful indentation
- Performance considerations with large documents
- Edge cases in special formatting
- Detecting and handling various transcription formats
- Managing browser content extraction which may change over time

## Future Directions
- Enhanced support for complex Markdown elements
- Performance optimizations
- Additional special format conversions
- Support for more transcription tool formats
- Extended YouTube metadata extraction options
- Support for other video platforms 